# -*- coding: utf-8 -*-
"""text_snnipt_2_Faezeh.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/150dcCwCRTZ4R2FOFo-yJNg8_WSNQpTgB
"""

import numpy as np
from sklearn.svm import SVC
from scipy.io import loadmat
data = loadmat('features.mat')
print("Loaded mat file")

step_labels_lf = data['step_labels_lf']
step_labels_lh = data['step_labels_lh']
step_labels_rf = data['step_labels_rf']
step_labels_rh = data['step_labels_rh']
print("Labels loaded")

steps_ft_lf = data['step_ft_lf']
steps_ft_lh = data['step_ft_lh']
steps_ft_rf = data['step_ft_rf']
steps_ft_rh = data['step_ft_rh']
print("Features loaded")

steps_features_lf = data['step_features_lf']
steps_features_lh = data['step_features_lh']
steps_features_rf = data['step_features_rf']
steps_features_rh = data['step_features_rh']
step_no_lf = np.zeros_like(step_labels_lf)
step_no_lh = np.zeros_like(step_labels_lh) + 1
step_no_rf = np.zeros_like(step_labels_rf) + 2
step_no_rh = np.zeros_like(step_labels_rh) + 3
step_no = np.concatenate([step_no_lf, step_no_lh, step_no_rf, step_no_rh], 0)
print("Labels prepared")

labels = np.concatenate([step_labels_lf, step_labels_lh, step_labels_rf, step_labels_rh], 0)
labels = np.squeeze(labels, 1)
print("Data normalization")

steps = np.concatenate([steps_ft_lf, steps_ft_lh, steps_ft_rf, steps_ft_rh], 0)
mean = np.mean(steps, (0, 1))
std = np.std(steps, (0, 1))
steps = (steps - mean) / std
print("Features preparation")
features = np.concatenate([steps_features_lf, steps_features_lh, steps_features_rf, steps_features_rh], 0)
mean = np.mean(features, 0)
std = np.std(features, 0)
features = (features - mean) / std
features = features.astype(np.float32)
print("Data split")
split = int(len(labels) * 0.9)

def unison_shuffled_copies(a, b, c, d):
     p = np.random.permutation(len(a))
     return a[p], b[p], c[p], d[p]

print("Final data prepare")
labels, steps, features, step_no = unison_shuffled_copies(labels, steps, features, step_no)

train_labels, val_labels = labels[:split], labels[split:]
train_steps, val_steps = steps[:split], steps[split:]
train_features, val_features = features[:split], features[split:]
train_step_no, val_step_no = step_no[:split], step_no[split:]
print("Done")

from sklearn.svm import SVC
clf = SVC(kernel='rbf')

clf.fit(train_features, train_labels)

val_features_predictions = clf.predict(val_features)

from sklearn.metrics import accuracy_score
print(accuracy_score(val_labels, val_features_predictions))